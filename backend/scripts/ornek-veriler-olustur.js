import mongoose from 'mongoose';
import Sinif from '../models/Sinif.js';
import Ders from '../models/Ders.js';
import Konu from '../models/Konu.js';
import Test from '../models/Test.js';
import PERMANENT_SETTINGS from '../config/permanent-settings.js';

// MongoDB baƒülantƒ±sƒ±
mongoose.connect(PERMANENT_SETTINGS.DATABASE.CONNECTION_STRING, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB baƒülantƒ± hatasƒ±:'));
db.once('open', async () => {
  console.log('‚úÖ MongoDB baƒülantƒ±sƒ± ba≈üarƒ±lƒ±');
  
  try {
    // Mevcut verileri temizle
    await Test.deleteMany({});
    await Konu.deleteMany({});
    await Ders.deleteMany({});
    console.log('üóëÔ∏è Mevcut veriler temizlendi');
    
    // Sƒ±nƒ±flarƒ± al
    const siniflar = await Sinif.find().sort('ad');
    console.log(`üìö Bulunan sƒ±nƒ±flar: ${siniflar.map(s => s.ad).join(', ')}`);
    
    // Her sƒ±nƒ±f i√ßin dersler olu≈ütur
    for (const sinif of siniflar) {
      const dersler = [
        { ad: 'T√ºrk√ße', sinifAdi: sinif.ad },
        { ad: 'Matematik', sinifAdi: sinif.ad },
        { ad: 'Hayat Bilgisi', sinifAdi: sinif.ad },
        { ad: 'Fen Bilimleri', sinifAdi: sinif.ad }
      ];
      
      for (const dersData of dersler) {
        const ders = new Ders({
          ad: dersData.ad,
          sinif: sinif._id,
          sinifAdi: dersData.sinifAdi,
          aktif: true
        });
        await ders.save();
        console.log(`‚úÖ Ders olu≈üturuldu: ${sinif.ad} - ${dersData.ad}`);
        
        // Her ders i√ßin konular olu≈ütur
        const konular = [
          { ad: 'Okuma', sira: 1, dersAdi: dersData.ad },
          { ad: 'Yazma', sira: 2, dersAdi: dersData.ad },
          { ad: 'Dil Bilgisi', sira: 3, dersAdi: dersData.ad }
        ];
        
        for (const konuData of konular) {
          const konu = new Konu({
            ad: konuData.ad,
            sira: konuData.sira,
            ders: ders._id,
            sinif: sinif._id,
            dersAdi: konuData.dersAdi,
            sinifAdi: sinif.ad,
            aktif: true
          });
          await konu.save();
          console.log(`‚úÖ Konu olu≈üturuldu: ${sinif.ad} - ${dersData.ad} - ${konuData.ad}`);
          
          // Her konu i√ßin √∂rnek testler olu≈ütur
          for (let i = 1; i <= 3; i++) {
            const test = new Test({
              testAdi: `${konuData.ad} Test ${i}`,
              ad: `${konuData.ad} Test ${i}`,
              aciklama: `${sinif.ad} ${dersData.ad} ${konuData.ad} konusu i√ßin √∂rnek test ${i}`,
              sinif: sinif.ad,
              ders: dersData.ad,
              konu: konuData.ad,
              sinifAdi: sinif.ad,
              dersAdi: dersData.ad,
              konuAdi: konuData.ad,
              sorular: [
                {
                  soru: `${konuData.ad} ile ilgili √∂rnek soru ${i}.1?`,
                  secenekler: ['A ≈üƒ±kkƒ±', 'B ≈üƒ±kkƒ±', 'C ≈üƒ±kkƒ±', 'D ≈üƒ±kkƒ±'],
                  dogruCevap: 0,
                  aciklama: 'Doƒüru cevap A ≈üƒ±kkƒ±dƒ±r.'
                },
                {
                  soru: `${konuData.ad} ile ilgili √∂rnek soru ${i}.2?`,
                  secenekler: ['Se√ßenek 1', 'Se√ßenek 2', 'Se√ßenek 3', 'Se√ßenek 4'],
                  dogruCevap: 1,
                  aciklama: 'Doƒüru cevap B ≈üƒ±kkƒ±dƒ±r.'
                }
              ],
              puan: 10,
              aktif: true
            });
            await test.save();
            console.log(`‚úÖ Test olu≈üturuldu: ${test.testAdi}`);
          }
        }
      }
    }
    
    console.log('üéâ √ñrnek veriler ba≈üarƒ±yla olu≈üturuldu!');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Hata:', error);
    process.exit(1);
  }
}); 