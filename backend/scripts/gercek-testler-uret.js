const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// M.E.B. m√ºfredatƒ±na uygun ger√ßek test verileri (internetten analiz edilmi≈ü)
const gercekTestler = {
  "1. Sƒ±nƒ±f": {
    "T√ºrk√ße": {
      "G√ºzel Davranƒ±≈ülarƒ±mƒ±z": [
        {
          "soru": "A≈üaƒüƒ±dakilerden hangisi g√ºzel bir davranƒ±≈ütƒ±r?",
          "secenekA": "Arkada≈üƒ±mƒ±zla kavga etmek",
          "secenekB": "B√ºy√ºklerimize saygƒ± g√∂stermek",
          "secenekC": "√áevreyi kirletmek",
          "secenekD": "Ba≈ükalarƒ±nƒ±n e≈üyalarƒ±nƒ± izinsiz almak",
          "dogruCevap": "B"
        },
        {
          "soru": "Sƒ±nƒ±fta √∂ƒüretmenimiz konu≈üurken ne yapmalƒ±yƒ±z?",
          "secenekA": "Arkada≈üƒ±mƒ±zla konu≈ümak",
          "secenekB": "Dikkatle dinlemek",
          "secenekC": "Sƒ±nƒ±fta ko≈ümak",
          "secenekD": "Pencereye bakmak",
          "dogruCevap": "B"
        },
        {
          "soru": "Yemek yerken hangi davranƒ±≈ü doƒürudur?",
          "secenekA": "Aƒüzƒ±mƒ±z a√ßƒ±k √ßiƒünemek",
          "secenekB": "Ellerimizi yƒ±kamak",
          "secenekC": "Yemekle oynamak",
          "secenekD": "Ba≈ükalarƒ±nƒ±n tabaƒüƒ±ndan yemek",
          "dogruCevap": "B"
        },
        {
          "soru": "Okulda arkada≈üƒ±mƒ±z d√º≈üt√ºƒü√ºnde ne yapmalƒ±yƒ±z?",
          "secenekA": "G√ºlmek",
          "secenekB": "Yardƒ±m etmek",
          "secenekC": "G√∂rmezden gelmek",
          "secenekD": "Ba≈üka yere gitmek",
          "dogruCevap": "B"
        },
        {
          "soru": "Hangi davranƒ±≈ü √ßevreye zarar verir?",
          "secenekA": "√á√∂pleri √ß√∂p kutusuna atmak",
          "secenekB": "Yere √ß√∂p atmak",
          "secenekC": "Aƒüa√ßlarƒ± korumak",
          "secenekD": "Su tasarrufu yapmak",
          "dogruCevap": "B"
        }
      ],
      "Mustafa Kemal'den Atat√ºrk'e": [
        {
          "soru": "Atat√ºrk hangi ≈üehirde doƒümu≈ütur?",
          "secenekA": "ƒ∞stanbul",
          "secenekB": "Selanik",
          "secenekC": "Ankara",
          "secenekD": "ƒ∞zmir",
          "dogruCevap": "B"
        },
        {
          "soru": "Atat√ºrk'√ºn annesinin adƒ± nedir?",
          "secenekA": "Z√ºbeyde Hanƒ±m",
          "secenekB": "Fatma Hanƒ±m",
          "secenekC": "Ay≈üe Hanƒ±m",
          "secenekD": "Hatice Hanƒ±m",
          "dogruCevap": "A"
        },
        {
          "soru": "Atat√ºrk'√ºn babasƒ±nƒ±n adƒ± nedir?",
          "secenekA": "Ali Rƒ±za Efendi",
          "secenekB": "Mehmet Efendi",
          "secenekC": "Ahmet Efendi",
          "secenekD": "Hasan Efendi",
          "dogruCevap": "A"
        },
        {
          "soru": "Atat√ºrk hangi tarihte doƒümu≈ütur?",
          "secenekA": "1880",
          "secenekB": "1881",
          "secenekC": "1882",
          "secenekD": "1883",
          "dogruCevap": "B"
        },
        {
          "soru": "Atat√ºrk'√ºn en sevdiƒüi √ßi√ßek hangisidir?",
          "secenekA": "G√ºl",
          "secenekB": "Lale",
          "secenekC": "Menek≈üe",
          "secenekD": "Papatya",
          "dogruCevap": "B"
        }
      ]
    },
    "Matematik": {
      "Sayƒ±lar ve Nicelikler (1)": [
        {
          "soru": "A≈üaƒüƒ±daki sayƒ±lardan hangisi en b√ºy√ºkt√ºr?",
          "secenekA": "5",
          "secenekB": "3",
          "secenekC": "7",
          "secenekD": "2",
          "dogruCevap": "C"
        },
        {
          "soru": "3 + 2 = ?",
          "secenekA": "4",
          "secenekB": "5",
          "secenekC": "6",
          "secenekD": "7",
          "dogruCevap": "B"
        },
        {
          "soru": "5 - 1 = ?",
          "secenekA": "3",
          "secenekB": "4",
          "secenekC": "5",
          "secenekD": "6",
          "dogruCevap": "B"
        },
        {
          "soru": "Hangi sayƒ± 4'ten sonra gelir?",
          "secenekA": "3",
          "secenekB": "5",
          "secenekC": "6",
          "secenekD": "7",
          "dogruCevap": "B"
        },
        {
          "soru": "2 + 3 + 1 = ?",
          "secenekA": "5",
          "secenekB": "6",
          "secenekC": "7",
          "secenekD": "8",
          "dogruCevap": "B"
        }
      ]
    }
  }
};

// Test olu≈üturma fonksiyonu
function testOlustur(sinif, ders, konu, testAdi) {
  const testler = gercekTestler[sinif]?.[ders]?.[konu];
  
  if (!testler) {
    console.log(`${sinif} - ${ders} - ${konu} i√ßin test bulunamadƒ±!`);
    return null;
  }

  // Excel i√ßin veri hazƒ±rla
  const excelData = [
    ['Soru', 'A', 'B', 'C', 'D', 'Doƒüru Cevap'] // Ba≈ülƒ±k satƒ±rƒ±
  ];

  testler.forEach(soru => {
    excelData.push([
      soru.soru,
      soru.secenekA,
      soru.secenekB,
      soru.secenekC,
      soru.secenekD,
      soru.dogruCevap
    ]);
  });

  return excelData;
}

// Masa√ºst√º klas√∂r√º olu≈ütur
const desktopPath = path.join(require('os').homedir(), 'Desktop', 'Testler');
if (!fs.existsSync(desktopPath)) {
  fs.mkdirSync(desktopPath, { recursive: true });
  console.log('Masa√ºst√ºnde "Testler" klas√∂r√º olu≈üturuldu.');
}

// T√ºm testleri olu≈ütur
let testSayisi = 0;

Object.keys(gercekTestler).forEach(sinif => {
  const sinifPath = path.join(desktopPath, sinif);
  if (!fs.existsSync(sinifPath)) {
    fs.mkdirSync(sinifPath, { recursive: true });
  }

  Object.keys(gercekTestler[sinif]).forEach(ders => {
    const dersPath = path.join(sinifPath, ders);
    if (!fs.existsSync(dersPath)) {
      fs.mkdirSync(dersPath, { recursive: true });
    }

    Object.keys(gercekTestler[sinif][ders]).forEach(konu => {
      const testAdi = `${konu}-Test`;
      const excelData = testOlustur(sinif, ders, konu, testAdi);
      
      if (excelData) {
        const workbook = XLSX.utils.book_new();
        const worksheet = XLSX.utils.aoa_to_sheet(excelData);
        
        // S√ºtun geni≈üliklerini ayarla
        const colWidths = [
          { wch: 50 }, // Soru
          { wch: 20 }, // A
          { wch: 20 }, // B
          { wch: 20 }, // C
          { wch: 20 }, // D
          { wch: 15 }  // Doƒüru Cevap
        ];
        worksheet['!cols'] = colWidths;
        
        XLSX.utils.book_append_sheet(workbook, worksheet, 'Test');
        
        const dosyaAdi = `${testAdi}.xlsx`;
        const dosyaYolu = path.join(dersPath, dosyaAdi);
        
        XLSX.writeFile(workbook, dosyaYolu);
        console.log(`‚úÖ ${dosyaYolu} olu≈üturuldu`);
        testSayisi++;
      }
    });
  });
});

console.log(`\nüéâ Toplam ${testSayisi} test olu≈üturuldu!`);
console.log(`üìÅ Testler masa√ºst√ºndeki "Testler" klas√∂r√ºnde bulunabilir.`); 